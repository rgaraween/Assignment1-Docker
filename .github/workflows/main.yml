name: Deploy to ECR
# updated ECR Repo assignment1-clo835
on: 
  push:
    branches: [ development ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        MYSQL_ECR_REPOSITORY: assignment1-ecr-mysql
        APP_ECR_REPOSITORY: assignment1-ecr-app
        MYSQL_IMAGE_TAG: v0.1
        APP_IMAGE_TAG: v0.1
      run: |
        ls -ltra
        # Docker build command
        docker build -t $ECR_REGISTRY/$MYSQL_ECR_REPOSITORY:$MYSQL_IMAGE_TAG -f Dockerfile_mysql .
        docker build -t $ECR_REGISTRY/$APP_ECR_REPOSITORY:$APP_IMAGE_TAG .
        # Unit test
        #docker run -d -e MYSQL_ROOT_PASSWORD=pw  --name my_db $ECR_REGISTRY/$ECR_REPOSITORY/my_db:$MYSQL_IMAGE_TAG  
        #docker ps
        #export DBHOST=`docker inspect -f ‘{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}’ my_db`
        #echo $DBHOST
        #echo "Pause for 10 seconds to let MYSQL container start"
        #sleep 10
        #docker run -p 8080:8080  -e DBHOST=$DBHOST -e DBPORT=3306 -e  DBUSER=root -e DBPWD=pw  -e DATABASE=employees $ECR_REGISTRY/$ECR_REPOSITORY/my_app:$APP_IMAGE_TAG
        #echo "Pause for 10 seconds to let container start"
        #sleep 10
        #curl http://localhost:8080 -vvv
        docker push $ECR_REGISTRY/$MYSQL_ECR_REPOSITORY:$MYSQL_IMAGE_TAG
        docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:$APP_IMAGE_TAG
